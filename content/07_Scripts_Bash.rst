Скрипты и переменные в bash
===========================

:date: 2022-05-21
:summary: Скрипты и переменные в bash
:status: published
:author: Барыкин А., обновлено: Червяков Н. 

.. default-role:: code
.. contents:: **Содержание**

*Теоретическое введение*
~~~~~~~~~~~~~~~~~~~~~~

Оболочка, или шелл (shell) — это программа, принимает ваши команды и
передаёт их операционной системе. BASH расшифровывается как Bourne-Again 
SHell (Поскольку это усовершенствованная и модернизированная вариация 
командной оболочки Bourne shell).

Bash – это универсальный инструмент для выполнения различных задач,
который в некоторых случаях позволяет избежать установки
специализированного программного обеспечения. Одновременно, это
скриптовый язык программирования, позволяющий создавать сценарии для
автоматизации различных операций.

Скрипт или как его еще называют - сценарий, это последовательность
команд, которые по очереди считывает и выполняет
программа-интерпретатор, в нашем случае это программа командной строки -
bash

Скрипт - это обычный текстовый файл, в котором перечислены обычные
команды, которые мы привыкли вводить вручную, а также указана программа,
которая будет их выполнять.

Простейший пример скрипта для командной оболочки Bash:

.. code:: bash

    # !/bin/bash
    echo "Please I want a good grade"

Итак, любой bash-скрипт должен начинаться со строки:

.. code:: bash

    #!/bin/bash

В этой строке "#!" - это шебанг(shebang): когда скрипт с шебангом выполняется как программа в Unix-подобных операционных системах, загрузчик программ рассматривает остаток строки после шебанга как полное имя файла(с учетом пути) программы-интерпретатора, в нашем случае это программа bash. Загрузчик запускает bash и передаёт ей в качестве параметра имя файла скрипта.
Если вдруг программа находится в другой директории – необходимо писать соответствующий путь, найти его можно так: whereis bash

Команды оболочки отделяются знаком перевода строки, комментарии выделяют
знаком решётки. Как и в командной строке, в Bash можно записывать
команды в одной строке, разделяя точкой с запятой.

Нужно отметить, что перед тем как запустить скрипт, необходимо
сделать файл со скриптом исполняемым, иначе, попытавшись его запустить, вы
столкнётесь с ошибкой Permission denied.

Чтобы сделать файл исполняемым, необходимо набрать

.. code:: bash

    chmod +x ./myscript

Здесь команда chmod устанавливает определенные права доступа к файлу, в данном случае действие "+x" означает "разрешить выполнение".

*Основные команды*
~~~~~~~~~~~~~~~~~

В Linux файлы и папки имеют иерархическую организацию, то есть
существует некая начальная папка, называемая корневой. В ней
содержатся файлы и подпапки, которые в свою очередь содержат файлы и
свои подпапки.

Если вы хотите идентифицировать, под каким пользователем авторизованы в данный момент, вам нужно ввести в командную строку следующую команду:

.. code:: bash
   
   whoami
   
Основные команды для работы с папками и файлами:

.. code:: bash
   
   pwd
   cd


Команда pwd (сокращение от print working directory) отображает текущее
местоположение в структуре каталогов.

Команда "cd ./directory" позволяет перейти в дочернюю папку, "cd /"  - это переход вкорневую папку. Для некоторых часто используемых директорий существуют сокращения, позволяющие не писать полный путь: "cd ~" позволяет перейти в домашний каталог,  "cd .." позволяет перейти на 1 уровень выше.

Команда mkdir создаёт новый каталог в текущем каталоге.

.. code:: bash

    mkdir directory

Для создания файла вам нужно ввести команду

.. code:: bash

    touch


Также возможно прописать путь, где нужно создать файл.
Для перемещения директорий и файлов используется команда mv, после которой вы пишете название директории или файла, который хотите переместить, а затем место, куда хотите переместить(dir1 будет перемещена в dir2): 

.. code:: bash

   mv ~/dir1 ~/dir2

Для копирования директории при помощи команды cp нужно использовать ключ -r(без него копируются файлы), при этом если конечная директория (dir2) не существует, то она будет создана при копировании, а если она непустая, то она будет перезаписана. Команда rm удаляет файлы, не спрашивая подтверждения; можно задать рекурсивное удаление всех файлов в папке.

.. code:: bash

   cp -r ~/dir1 ~/dir2
   
.. code:: bash
   
   rm -r ~/dir1/


Команда echo выводит свои аргументы по стандартному каналу вывода

.. code:: bash

    echo

Если вам необходимо проверить содержимое определенного файла, к примеру
hosting.txt, достаточно воспользоваться командой cat. Это выглядит, например, так:

.. code:: bash

    cat hosting.txt

Команда выводит записи нескольких файлов с новой строки, также выводит из стандартного потока ввода, позволяя в том числе сразу записать информацию в файл(cat > file). 
Команда ssh является протоколом подключения к серверу. К примеру:

.. code:: bash

    ssh -p 55078 b0600713@remote.vdi.mipt.ru

Команда head читает первые 10 строк любого переданного текста(из файла или ввода) и выводит
их по стандартному каналу(с опцией "-n [число]" позволяет прочитать нужное количество строк). Команда tail работает аналогично команде head, но читает строки с конца

.. code:: bash

    head

    tail
    
Команда ps выводит информацию о запущенных процессах.

.. code:: bash

    ps

Выводится четыре элемента:

• ID процесса (PID),

• тип терминала (TTY),

• время работы процесса (TIME),

• имя команды, запустившей процесс (CMD).


Команда awk находит и заменяет текст в файлах по заданному шаблону:

.. code:: bash

    awk 'pattern {action}' test.txt

Команда wget скачивает файлы или интернет страницы из Сети и помещает их в текущий каталог. Во время загрузки мы можем видеть прогресс, размер файла, дату его последнего изменения, а также скорость загрузки. C помощью параметров можно взять URL из файла,сохранить файл с другим именем, скачать несколько файлов и многое другое.

.. code:: bash

    wget


Существует также большое количество других команд, применяемых в циклах,
условных и других конструкциях в скриптах. Некоторые из них перечислены
ниже.

break - выход из цикла for, while или until

continue - выполнение следующей итерации цикла for, while или until

exit - выход из оболочки

export - отмечает аргументы как переменные для передачи в дочерние
процессы в среде (может также передавать и функции) 

hash - запоминает полные имена путей команд, указанных в качестве
аргументов, чтобы не искать их при следующем обращении

kill - посылает сигнал завершения процессу

pwd - выводит текущий рабочий каталог

read - читает строку из ввода оболочки и использует ее для присвоения
значений указанным переменным

find - команда для поиска файлов и каталогов на основе специальных условий, например, для поиска файлов по разрешениям, владельцам, группам, типу, размеру и другим подобным критериям

return - заставляет функцию оболочки выйти с указанным значением

test - проверяет типа файла или сравнивает значения выражений, возвращает код возврата 0 (истина) или 1 (ложь) 
в зависимости от вычисления выражения(зачастую вместо команды можно использовать парный оператор '[')

times - выводит имя пользователя и системное время, использованное
оболочкой и ее потомками

trap - запускает команды, переданные ей, которые должны выполняться при получении
оболочкой сигнала(сигналы можно указывать как в полном виде – SIGTERM, так и в виде кода – 15)

unset - вызывает уничтожение переменных оболочки и окружения(среды)

wait - ждет выхода из дочернего процесса с определенным ID и сообщает выходное состояние, если ID не указан, команда ожидает завершения всех дочерних фоновых заданий и возвращает статус выхода последней ожидаемой команды

*Переменные*
~~~~~~~~~~~

Написание скриптов на Bash редко обходится без сохранения временных
данных, а значит создания переменных. Без переменных не обходится ни
один язык программирования и наш примитивный язык командной оболочки
тоже.

Существуют два типа переменных, которые можно использовать в
bash-скриптах:

1. Переменные среды - доступны для всей системы и наследуются всеми порожденными дочерними процессами и оболочками.

2. Пользовательские переменные

.. code:: bash

    #!/bin/bash
    # display user home
    echo "Home for the current user is: $HOME"


В этом коротком скрипте HOME является переменной среды. Можно заметить,
что она находится в двойных кавычках, это не помешает системе её
распознать.

Наоборот, для того чтобы вывести на экран именно значок доллара, а не
значение переменной – понадобится использование управляющего символа,
обратной косой черты, перед знаком доллара:

.. code:: bash

    echo "I have \$1 in my pocket"

В дополнение к переменным среды, bash-скрипты позволяют задавать и
использовать в сценарии собственные переменные. Подобные переменные
хранят значение до тех пор, пока не завершится выполнение сценария.

Как и в случае с системными переменными, к пользовательским переменным
можно обращаться, используя знак доллара:

.. code:: bash

    #!/bin/bash
    # testing variables
    grade=7
    student="Alexey"
    echo "$student worked hard this semester, his grade will be $grade or more"


Одна из самых полезных возможностей bash-скриптов — это возможность
извлекать информацию из вывода команд и назначать её переменным, что
позволяет использовать эту информацию где угодно в файле сценария.

Сделать это можно двумя способами.

• С помощью значков обратного апострофа вокруг переменной «` `»

.. code:: bash

    #!/bin/bash
    mydir=`pwd`
    echo $mydir

• С помощью конструкции $()

.. code:: bash

    #!/bin/bash
    mydir=$(pwd)
    echo $mydir


В ходе его работы вывод команды pwd будет сохранён в переменной mydir,
содержимое которой, с помощью команды echo, попадёт в консоль.

Bash не различает типов переменных так, как языки высокого уровня,
например, С++, вы можете присвоить переменной как число, так и строку.
Одинаково все это будет считаться строкой. Оболочка поддерживает только
слияние строк, для этого просто запишите имена переменных подряд:

.. code:: bash

    #!/bin/bash
    string1="hello "
    string2= "world"
    string=$string1$string2


*Параметры скрипта*
~~~~~~~~~~~~~~~~~

Не всегда можно создать bash скрипт, который не зависит от ввода
пользователя. В большинстве случаев нужно спросить у пользователя какое
действие предпринять или какой файл использовать. При вызове скрипта мы
можем передавать ему параметры. Все эти параметры доступны в виде
переменных с именами в виде номеров.

Переменная с именем 1 содержит значение первого параметра, переменная 2 -
второго и так далее. Существует также ряд других переменных, значения которых можно использовать в скрипте:

1. $0 – имя скрипта

2. $# – количество переданных параметров

3. $@ – значения всех параметров, разделенных пробелами

4. $$ – PID(идентификатор) процесса, выполняющего скрипт

5. $? – код завершения предыдущей команды

Этот bash скрипт выведет значение каждого параметра

.. code:: bash

   #!/bin/bash
   for arg in "$@"
   do
    echo "Arg = $arg"
   done

При работе с параметрами в скрипте используется команда shift. Она сдвигает параметры на одну позицию влево: значение из переменной $3 перемещается в $2, из $2 — в $1, но из $1 значение просто отбросится и не сместится в $0, так как там неизменно хранится название запущенной программы. Это позволяет эффективно обработать все параметры, когда нельзя заранее узнать их количество. Достаточно лишь обработать $1, сделать сдвиг и повторить процедуру.

*Примеры конструкций, используемых в скриптах*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

В скриптах можно использовать многие элементы программирования, уже
знакомые нам по изучению языка программирования Python. К примеру,
управляющие конструкции или циклы. Ниже будет приведен синтаксис этих
конструкций.

Условная конструкция:
^^^^^^^^^^^^^^^^^^^^^

if команда_условие
then
команда
else
команда
fi

Эта команда проверяет код завершения команды условия, и если 0 (успех)
то выполняет команду или несколько команд после слова then, если код
завершения 1 выполняется блок else, fi означает завершение блока команд
Пример скрипта, проверяющего длину введенной строки:

.. code:: bash

    #!/bin/bash
    echo -n "Enter string: "
    read str
    if [ ${#str} -lt 8 ]
    then
      echo String is too short
    else
      echo String is ok
    fi
    
Цикл for:
^^^^^^^^^

for переменная in список
do
команда
done

Команда перебирает весь список, и присваивает по очереди переменной значение из
списка, после каждого присваивания выполняет команды, расположенные
между do и done.

Например, переберем пять цифр:

.. code:: bash

    #!/bin/bash

    for index in 1 2 3 4 5
    do
    echo $index
    done

А еще можно перечислить все файлы из текущей директории(ls -lh позволяет показать файлы с правами датами изменения):

.. code:: bash

    $  for file in $(ls -lh); do echo "$file"; done

Цикл while:
^^^^^^^^^^^

while команда условие
do
команда
done

.. code:: bash

    !/bin/bash
    index=1
    while [[ $index < 5 ]]
    do
    echo $index
    let "index=index+1"
    done


При этом сначала чиатется значение переменой, затем команда let просто выполняет указанную математическую операцию,
в нашем случае увеличивает значение переменной на единицу. 




