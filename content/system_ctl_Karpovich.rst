Основные программы
#############################################

:date: 2022-05-04
:summary: Основные программы для работы в терминале
:status: published
:author: Ачкасов К.

.. role:: bash(code)
	:language: bash

Что такое systemd, systemctl и с чем их показывают в терминале Linux?
============

Начнем с того, что systemd — это подсистема инициализации и управления службами в Linux
Основная особенность — интенсивное распараллеливание запуска служб в процессе загрузки системы, что позволяет существенно ускорить запуск операционной системы. Основная единица управления — модуль, одним из типов модулей являются «службы» -  аналог демонов - компьютерных программ в UNIX-подобных системах, запускаемых самой системой и работающих в фоновом режиме без прямого взаимодействия с пользователем.

Демоны обычно запускаются во время загрузки системы. Типичные задачи демонов: серверы сетевых протоколов (HTTP, FTP, электронная почта и др.), управление оборудованием, поддержка очередей печати, управление выполнением заданий по расписанию и т. д. В техническом смысле демоном считается процесс, который не имеет управляющего терминала.

Демон также является персонажем греческой мифологии, выполняющим задачи, за которые не хотят браться боги. Как утверждается в «Справочнике системного администратора UNIX», в Древней Греции понятие «личный демон» было, отчасти, сопоставимо с современным понятием «ангел-хранитель».

Все эти юниты разложены в трех каталогах:
:bash:`/usr/lib/systemd/system/` – юниты из установленных пакетов RPM — всякие nginx, apache, mysql и прочее
:bash:`/usr/lib/systemd/system/` — юниты, созданные в runtime 
:bash:`/etc/systemd/system/` — юниты, созданные системным администратором

Помимо простого запуска и контроля служб, systemd предлагает некоторые другие удобные функции, для использования которых ранее системным администраторам приходилось прибегать к помощи дополнительных программ-демонов. Среди таких функций:
•	сокет-активация служб (заменяет ``inetd``);
•	запуск сервисов по расписанию (заменяет ``cron``);
•	работа с аппаратным сторожевым таймером (заменяет ``watchdog``);
•	смена корня (заменяет ``chroot``);
•	автомонтирование томов и сетевых ресурсов (заменяет ``mount`` и ``fstab``);
•	``journalctl`` — служба журналирования;
•	``systemd-analyze`` — анализ скорости запуска служб;
•	``systemd-boot`` — UEFI загрузчик(замена ``grub``).


А где здесь *systemctl*?
============
Так вот же она!

Обсудим команду ``systemctl``, которая является инструментом центрального управления для контроля системы инициализации. Я расскажу о том, как управлять службами, проверять статус, изменять состояние системы и работать с файлами конфигурации.
Обратите внимание, что хотя система systemd стала системой инициализации по умолчанию для многих дистрибутивов Linux, она не используется повсеместно во всех дистрибутивах. По мере изучения этого руководства, если ваш терминал выводит ошибку :bash: `systemctl is not installed`, скорее всего, на вашей машине установлена другая система инициализации.
(На наших Linux в МФТИ она стоит)
В systemd целью большинства действий являются «модули», являющиеся ресурсами, которыми ``systemd`` знает, как управлять. Модули распределяются по категориям по типу ресурса, который они представляют, и определяются файлами, известными как файлы модулей. Тип каждого модуля можно вывести из суффикса в конце файла.
Для задач по управлению службами целевым модулем будут модули службы, которые имеют файлы модулей с суффиксом ``*.service*``. Однако для большинства команд по управлению службами вы можете не использовать суффикс ``*.service*``, поскольку systemd достаточно умна, чтобы знать, что вы, возможно, хотите работать со службой при использовании команд по управлению службами.

Без параметров, ``systemctl`` показывает список запущенных служб, точек монтирования, устройств и других юнитов.
Примерный вывод команды:
1) название юнита;
2) тип юнита (например, ``*service*``: служба или демон, mount: точка монтирования, *device*: устройства);
3) состояние юнита (загружен или нет);
4) обобщенный статус юнита (``*active*``: выполняется, ``*inactive*``: не был запущен, ``*maintenance*``: требуется внимание администратора);
5) текущий статус (запущен или нет);
6) описание.


Запуск и остановка служб
============
Мы такие команды сделать не сможем, так как прав sudo пользователя у нас нет, но можете попробовать их написать на своей виртуальной машине или установленном Linux
Чтобы запустить службу ``systemd``, используя инструкции в файле модуля службы, используйте команду ``start``. Если вы работаете как пользователь без прав ``root``, вам потребуется использовать ``sudo``, поскольку это влияет на состояние операционной системы:


:bash:`$ sudo systemctl start application.service`


Как мы уже упомянули выше, ``systemd`` будет искать файлы **.service* для команд управления службами, так что команду можно легко ввести следующим образом:

 :bash:`$ sudo systemctl start application`
 
Хотя вы можете использовать вышеуказанный формат для общего администрирования, для ясности мы будем использовать суффикс *.service* для остальных команд, чтобы предельно четко выражать цель, над которой мы работаем.
Чтобы остановить работающую в данный момент службу, можно использовать команду ``stop``:

 :bash:`$ sudo systemctl stop application.service`
  
  
  
Перезапуск и перезагрузка
============

Чтобы перезапустить работающую службу, можно использовать команду *restart*

:bash:`$ sudo systemctl restart application.service`

Включение и отключение служб
============

Указанные выше команды полезны для запуска или остановки служб во время текущего сеанса. Чтобы дать команду ``systemd`` автоматически запускать службы при загрузке, их необходимо включить.

Для запуска службы во время загрузки используйте команду *enable*:

:bash:`$ sudo systemctl enable application.service`

При этом будет создана символическая ссылка из системной копии служебного файла (обычно в ``/lib/systemd/system`` или ``/etc/systemd/system``) в месте на диске, где ``systemd`` ищет файлы для автозапуска (обычно ``/etc/systemd/system/some_target.target.wants``)

Чтобы отключить автоматический запуск службы, можно ввести следующее:

:bash:`$ sudo systemctl disable application.service`

При этом будет удалена символическая ссылка, что укажет на то, что служба не должна запускаться автоматически.
Помните, что включение службы не запустит ее в текущем сеансе. Если вы хотите запустить службу и включить ее при загрузке, необходимо дать обе команды, ``start`` и ``enable``.



Проверка статуса служб
============

Чтобы проверить статус службы в вашей системе, можно использовать команду ``status``:
:bash:`systemctl status application.service`

T.к. на нашем компьютере нет службы ``application``, выберем одну из существующих служб, которые мы можем увидеть с помощью команды ``systemctl``
Пусть это будет ``cron.service``. В нём мы можем видеть количество запущенных процессов, частную иерархию и ещё какие-то забавные штуки
