Управление процессами в Linux
############################################
:date: 2022-05-19
:summary: Обзор основных функций
:author: Ефимова М.
:status: published
.. default-role:: code
.. contents:: Содержание


Теоретическая часть 
====================
В Linux для каждой отдельной программы при ее запуске создается процесс. Каждый пользователь может управлять поведением процессов, им запущенных. Это управление осуществляется с помощью утилит, а также посредством некоторых команд
командной оболочки. У каждого процесса есть свой идентификатор,Proccess ID или просто PID. Он определяется неслучайно, программа инициализации получает PID 1, а каждая следующая запущенная программа - на единицу больше.


Просмотр запущенных процессов 
------------------------------------------------
Существует большое количество утилит для решения различных задач по управлению процессами. Мы остановимся на работе с программой **htop** и ее аналогами в форме утилит в стиле GNU

Установим **htop** в зависимости от дистрибутива:

* Установка в Ubuntu и Debian:

.. code-block:: bash

 apt install htop

* Установка в Centos и Fedora:
.. code-block:: bash

 yum install screen

Открыв **htop**, мы сразу видим список запущенных процессов. Здесь отображены не все процессы Linux, а только запущенные от имени вашего пользователя:

.. image:: https://s3.us-east-2.wasabisys.com/gridpanekb/how-to-use-the-htop-command/htop-01.png

Выводится следующая главная информация:

* **PID** - идентификатор процесса ;
* **USER** - пользователь, от которого был запущен процесс;
* **PRI** - приоритет процесса Linux на уровне ядра;
* **NI** - приоритет выполнения процесса от -20 до 19;
* **S** - состояние процесса;
* **CPU** - используемые ресурсы процессора;
* **MEM** - использованная память;
* **TIME** - время работы процесса
Важной особенностью программы есть то, что вы можете сортировать процессы в Linux по нужному параметру. Просто кликните по названию параметра, оно выделится зеленым и будет выполнена сортировка.
 
Поиск процессов в Linux
------------------------------------------------

Чтобы найти процесс в **htop** можно использовать кнопку F3. Нажмите F3 и наберите нужное слово (окно поиска будет отображаться внизу). Дальше чтобы перейти к следующему вхождению нажимайте F2 или Esc для завершения поиска.

Поиск также можно осуществлять через Filter. Нажмите F4, введите слово и будут выведены только те процессы, имя которых включает это слово.

Изменение приоритета процессов
------------------------------------------------

Приоритет процесса Linux означает, насколько больше процессорного времени будет отдано этому процессу по сравнению с другими. Так мы можем настроить какая программа будет работать быстрее, а какая медленнее. Значение приоритета может колебаться от 19 (минимальный приоритет) до -20 - максимальный приоритет. 

В **htop** для управления приоритетом используется параметр Nice. Чтобы изменить приоритет процесса просто установите на него курсор и нажимайте F7 для уменьшения числа (увеличения приоритета) или F8 - для увеличения числа.

Для решения этой задачи необязательно использовать htop. Это можно сделать командой **nice**. С помощью нее вы можете указать приоритет для запускаемого процесса:

.. code-block:: bash

 nice -n 10 PID
 
Или изменить приоритет для уже существующего по его pid:

.. code-block:: bash

 renice -n 10 PID
 
Завершение процессов
------------------------------------------------

Если процесс завис и не отвечает, его необходимо завершить. В **htop**, чтобы убить процесс Linux, просто установите курсор на процесс и нажмите F9.

Система для управления процессами использует определенные сигналы, которые указывают процессу завершиться. Вот некоторые из них:

* **SIGTERM** - попросить процесс сохранить данные и завершится
* **SIGKILL** - завершить процесс немедленно, без сохранения

.. image:: https://sysadminium.ru/wp-content/uploads/2022/09/image-43.png

Также можно воспользоваться утилитой **kill**:

.. code-block:: bash

 kill PID

В случае, если по умолчанию задача не убивается можно сделать это следующим образом:

.. code-block:: bash

 kill SIGKILL PID
 
или 

.. code-block:: bash

 kill -9 PID
 #9-ключ сигнала SIGKILL
 
При выполнении программы **kill** сигнал **SIGTERM** посылается ему по умолчанию. В случае если процесс завис, мы можем изменить тип сигнала который немедленно прекратит процесс без его сохранения

**killall** - еще один вариант  программы **kill**, который используется для того, чтобы завершить работу процессов, носящих одно и то же имя:

.. code-block:: bash

 killall <name>

Ограничение процессов
------------------------------------------------

Устанавливать ограничения для текущего командного интерпретатора и создаваемых им процессов мы можем с помощью команды **ulimit**.

Синтаксис для этой команды:

.. code-block:: bash

 ulimit <options>
 
Список опций:

* **-S** - мягкое ограничение
* **-H** - жесткое ограничение(устанавливается суперпользователем и не может быть изменено обычным пользователям)
* **-a** - вывести всю информацию
* **-f** - максимальный размер создаваемых файлов
* **-n** - максимальное количество открытых файлов
* **-s** - максимальный размер стека
* **-t** - максимальное количество процессорного времени
* **-u** - максимальное количество запущенных процессов
* **-v** - максимальный объем виртуальной памяти

Например, мы можем установить ограничение для количества открываемых файлов:

.. code-block:: bash

 ulimit -Sn 1054
 
Практическая часть 
====================

1) Установите **htop** и ознакомьтесь со списком запущенных процессов 
2) "Убейте" два процесса: для одного используйте его PID, а для другого идентификатор конкретного задания
3) Попробуйте послать сигнал 19 (SIGSTOP) процессу, а потом опять вернитесь к списку запущенных программ
4) Изучив функции сигналов возобновите процесс





 
 
 
 
 
 
 
